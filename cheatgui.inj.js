const cheatgui = (function() {function $(selector, parent = document) {if (typeof selector !== 'string') return selector;return $(parent).querySelector(selector);}const createElem = document.createElement.bind(document);/*** Calculate the distance between two points (x1, y1) and (x2, y2).* @param {number} x1 - The x-coordinate of the first point.* @param {number} y1 - The y-coordinate of the first point.* @param {number} x2 - The x-coordinate of the second point.* @param {number} y2 - The y-coordinate of the second point.* @returns {number} The distance between the two points.*/function distance(x1, y1, x2, y2) {const a = x1 - x2;const b = y1 - y2;return Math.sqrt(a * a + b * b);}/*** The function generates a random string of specified length using a given set of characters or a* default set of alphanumeric characters.* @param length - The length parameter is the desired length of the generated ID.* @param [_chars] - The optional parameter `_chars` is a string of characters that can be used to* generate the random ID. If no value is provided for `_chars`, the function will use a default set* of characters that includes lowercase and uppercase letters and numbers.* @returns The function `generateId` returns a string of random characters with the specified length.* The characters used for the string can be either the default set of lowercase and uppercase letters* and digits, or a custom set of characters passed as the second argument `_chars`.*/function generateId(length, _chars = '') {const chars = _chars || 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';let result = '';for (let i = 0; i < length; i++) {result += chars[Math.floor(Math.random() * chars.length)];}return result;}class View {constructor() {this.ref = null;}init() {this.ref = createElem('div');return this;}mount(target) {this.ref = $(target);return this;}setContent(html) {this.ref.innerHTML = html;return this;}append(widget) {this.ref.appendChild(widget.getRef());return this;}}/*** Window class for creating draggable, collapsible windows with custom content.*/class Window {/*** Constructor takes x, y coordinates, optional name, and optional collapsed state.* @param {number} x - The x-coordinate of the window.* @param {number} y - The y-coordinate of the window.* @param {string} [name=''] - The optional name of the window.* @param {boolean} [collapsed=false] - The optional initial collapsed state of the window.*/constructor(x, y, name = '', collapsed = false) {this.windowRef = createElem('div');this.windowRef.classList.add('cgui-window');this.windowRef.style.position = 'absolute';this.windowRef.role = 'dialog';this.headerRef = createElem('div');this.headerRef.classList.add('header');const titleId = generateId(16);this.titleRef = createElem('span');this.titleRef.innerHTML = name;this.titleRef.id = titleId;this.headerRef.appendChild(this.titleRef);this.setTitle(name);this.windowRef.setAttribute('aria-labeledby', titleId);this.headerRef.innerHTML += '&nbsp;';this.arrowRef = createElem('span');this.arrowRef.innerHTML = '▼';this.headerRef.appendChild(this.arrowRef);const contentId = generateId(16);this.contentRef = createElem('div');this.contentRef.id = contentId;this.contentRef.classList.add('content');this.windowRef.setAttribute('aria-describedby', contentId);this.view = new View().mount(this.contentRef);this.windowRef.appendChild(this.headerRef);this.windowRef.appendChild(this.contentRef);this.windowRef.style.left = `${x}px`;this.windowRef.style.top = `${y}px`;if (collapsed) this.close();document.body.appendChild(this.windowRef);this.initDraggable();this.initToggleOnClick();this.initActivationOnClick();}/*** Set the title of the window.* @param {string} html - The title to be set.*/setTitle(html) {this.titleRef.innerHTML = html;return this;}/*** Set the content of the window.* @param {string} html - The content to be set.*/setContent(html) {this.view.setContent(html);return this;}/*** Move the window to the specified x, y coordinates.* @param {number} x - The x-coordinate to move the window to.* @param {number} y - The y-coordinate to move the window to.*/move(x, y) {this.windowRef.style.left = `${x}px`;this.windowRef.style.top = `${y}px`;return this;}/*** Close (collapse) the window.*/close() {this.windowRef.classList.add('collapsed');this.arrowRef.innerHTML = '◀';return this;}/*** Open (expand) the window.*/open() {this.windowRef.classList.remove('collapsed');this.arrowRef.innerHTML = '▼';return this;}/*** Toggle the window's collapsed state.*/toggle() {this.windowRef.classList.toggle('collapsed');if (this.windowRef.classList.contains('collapsed')) {this.arrowRef.innerHTML = '◀';} else {this.arrowRef.innerHTML = '▼';}return this;}/*** Hide the window*/hide() {this.windowRef.style.display = 'none';return this;}/*** Show the window*/show() {this.windowRef.style.display = 'block';return this;}/*** The "append" function adds a widget to the content reference.* @param widget - The widget parameter is an object that has a method called getRef() which returns* a reference to the DOM element of the widget. This method is used to retrieve the DOM element of* the widget and append it to the contentRef element.*/append(widget) {this.view.append(widget);return this;}/*** Initialize draggable functionality for the window*/initDraggable() {let offsetX, offsetY, isDragging = false;const onMouseDown = (e) => {e.preventDefault();e = e.touches ? e.touches[0] : e;offsetX = e.clientX - this.windowRef.offsetLeft;offsetY = e.clientY - this.windowRef.offsetTop;isDragging = true;this.windowRef.classList.add('cgui-dragging');};const onMouseMove = (e) => {if (!isDragging) return;e = e.touches ? e.touches[0] : e;this.move(e.clientX - offsetX, e.clientY - offsetY);};const onMouseUp = () => {isDragging = false;if (this.windowRef.classList.contains('cgui-dragging'))this.windowRef.classList.remove('cgui-dragging');};this.headerRef.addEventListener('mousedown', onMouseDown);this.headerRef.addEventListener('touchstart', onMouseDown);document.addEventListener('mousemove', onMouseMove);document.addEventListener('touchmove', onMouseMove);document.addEventListener('mouseup', onMouseUp);document.addEventListener('touchend', onMouseUp);}/*** Initialize toggle functionality on click for the window.* @param {number} [threshold=10] - The distance threshold to differentiate between click and drag.*/initToggleOnClick(threshold = 10) {let isClick = false,startX, startY;this.headerRef.addEventListener('pointerdown', e => {isClick = true;startX = e.clientX;startY = e.clientY;});document.addEventListener('pointermove', e => {if (distance(startX, startY, e.clientX, e.clientY) > threshold)isClick = false;});this.headerRef.addEventListener('pointerup', () => {if (isClick) this.toggle();});}/*** Initialize activation functionality on click for the window*/initActivationOnClick() {this.windowRef.addEventListener('pointerdown', () => {[...document.getElementsByClassName('cgui-window')].forEach(win => win.classList.remove('active'));this.windowRef.classList.add('active');});}/*** The function returns the window reference.* @returns The function `getRef()` is returning the value of `this.windowRef`.*/getRef() {return this.windowRef;}}/*** The Element class creates a new HTML element, sets its text content, adds* an onClick event listener, and returns a reference to the element. */class Element {/*** This is a constructor function that creates a new HTML element with a specified tag name or* defaults to a div element.* @param [elementName=div] - The parameter `elementName` is a string that represents the name of the* HTML element that will be created using the `createElem()` method. By default, if no* value is provided for `elementName`, it will create a `div` element. However, you can pass any* valid HTML element*/constructor(elementName = 'div') {this.ref = createElem(elementName);this.addClass('cgui-widget');}/*** The function sets the innerHTML of a given element to a specified text.* @param text - The text that will be set as the innerHTML of the element referenced by "this.ref".*/setText(text) {this.ref.innerHTML = text;return this;}/*** The function adds a click event listener to a specified element.* @param f - "f" is a function that will be executed when the element that this code is attached to* is clicked. It is a callback function that will be passed as an argument to the `addEventListener`* method.*/onClick(f) {this.ref.addEventListener('click', f);return this;}addClass(className) {this.ref.classList.add(className);return this;}setClass(className) {this.ref.className = 'cgui-widget ' + className.trim();return this;}/*** The function returns the value of the "ref" property.* @returns The function `getRef()` is returning the value of `this.ref`. It is not clear what* `this.ref` refers to without more context.*/getRef() {return this.ref;}}/*** The Text class extends the Element class and creates a div element with a margin and* sets its text content.*/class Text extends Element {constructor(text = '') {super('div');this.addClass('cgui-text');this.setText(text);}}/*** The Button class is a subclass of the Element class that creates a button element* with a specified text and CSS class. */class Button extends Element {constructor(text = '') {super('button');this.addClass('cgui-btn');this.setText(text);}}/*** The Input class is a subclass of the Element class that creates a input element* with a specified text and CSS class.*/class Input extends Element {constructor(text = '') {super('input');this.addClass('cgui-input');this.setText(text);}onInput(f) {this.ref.addEventListener('input', e => f(e, this.getText()));return this;}setText(text) {this.ref.value = text;return this;}getText() {return this.ref.value;}}/*** The Switch class creates a toggle switch element with customizable text* and an onChange event listener.*/class Switch extends Element {constructor(text = '') {super('label');const id = this.id = generateId(16);this.ref.for = id;this.addClass('cgui-switch');this.inputRef = createElem('input');this.inputRef.type = 'checkbox';this.inputRef.id = id;this.ref.appendChild(this.inputRef);this.sliderRef = createElem('span');this.sliderRef.className = 'cgui-switch-slider';this.ref.appendChild(this.sliderRef);this.textRef = createElem('span');this.textRef.className = 'cgui-switch-text';this.textRef.for = id;this.ref.appendChild(this.textRef);this.setText(text);}/*** This function adds an event listener to an input element that triggers a callback function when* the input's value changes.* @param func - func is a function that will be called when the 'change' event is triggered on the* input element. The function takes two parameters: the event object and a boolean value indicating* whether the input element is checked or not.*/onChange(func) {this.inputRef.addEventListener('change', e => func(e, this.inputRef.checked));return this;}/*** The function sets the innerHTML of a text reference element to a given text.* @param text - The text parameter is a string that represents the new text content that will be set* to the HTML element referenced by the textRef property.*/setText(text) {this.textRef.innerHTML = text;return this;}}const utils = {$,createElem,generateId,distance,appendToBody(widget) {document.body.appendChild(widget.getRef());},includeCSS(css) {const head = document.head;const style = createElem('style');style.setAttribute('type', 'text/css');style.innerHTML = css;head.appendChild(style);},includeCSSLink(url) {const link = createElem('link');link.rel = 'stylesheet';link.href = url;document.head.appendChild(link);},includeJS(url) {const script = createElem('script');script.src = url;document.body.appendChild(script);}};return { View, Window, Text, Button, Input, Switch, utils };})();if (typeof module !== 'undefined' && typeof module.exports == 'object') module.exports = cheatgui;globalThis.cheatgui = cheatgui;;cheatgui.utils.includeCSS(`body{-webkit-tap-highlight-color:transparent;}.cgui-widget{margin-bottom:8px;box-sizing:border-box;}.cgui-window{color-scheme:dark;position:absolute;color:#fff;padding:0;margin:0;border-radius:8px;overflow:hidden;min-width:200px;max-width:80vw;max-height:80vh;backdrop-filter:blur(6px);transition:box-shadow .2s;}.cgui-window>.header{background:#000b;padding:10px;margin:0;appearance:button;-ms-appearance:button;-moz-appearance:button;-webkit-appearance:button;user-select:none;display:flex;outline:none;border:none;box-shadow:none;}.cgui-window>.header>span{padding:0;margin:0;}.cgui-window>.header>span:last-child{margin-left:auto;}.cgui-window>.content{margin:0;background:#0009;padding:10px;min-height:100px;}.cgui-window.collapsed>.content{display:none;}.cgui-window.active{z-index:99999999;}.cgui-window.active>.header{background:#000e;font-weight:bold;}.cgui-window.active>.content{background:#000c;}.cgui-window.cgui-dragging{box-shadow:0 0 24px 0 #0008;opacity:0.9;}.cgui-btn{background:#555c;border:none;outline:none;color:#fff;padding:10px;width:100%;border-radius:8px;margin:5px 0 5px 0;display:block;transition:.1s;user-select:none;cursor:pointer;}.cgui-btn:hover{background:#777c;}.cgui-btn:active{background:#fffc;color:#000;transition:.15s;}.cgui-input{background:#555c;outline:none;color:#fff;padding:10px;width:100%;border-radius:8px;margin:5px 0 5px 0;display:block;transition:.1s;user-select:none;cursor:text;border:1px solid #777c;max-width:100%;}.cgui-input:focus{border-color:#fffc;}.cgui-switch{position:relative;display:inline-flex;width:34px;height:24px;vertical-align:middle;margin-right:8px;cursor:pointer}.cgui-switch input{display:none;}.cgui-switch-slider{position:absolute;top:0;left:0;right:0;bottom:0;background-color:#555c;border-radius:16px;transition:background-color 0.2s;}.cgui-switch-slider:before{position:absolute;content:"";height:20px;width:20px;left:2px;top:2px;background-color:#fffc;border-radius:50%;transition:transform 0.2s;}input:checked+.cgui-switch-slider{background-color:#fffc;}input:checked+.cgui-switch-slider:before{background-color:#555e;transform:translateX(10px);}.cgui-switch-text{margin-left:40px;margin-top:2px;}`)
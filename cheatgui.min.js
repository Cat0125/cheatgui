const cheatgui = (function() {function $(selector, parent = document) {if (typeof selector !== 'string') return selector;return $(parent).querySelector(selector);}function createElem(name) {return document.createElement(name);}function distance(x1, y1, x2, y2) {const a = x1 - x2;const b = y1 - y2;return Math.sqrt(a * a + b * b);}function generateId(length, _chars = '') {const chars = _chars || 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';let result = '';for (let i = 0; i < length; i++) {result += chars[Math.floor(Math.random() * chars.length)];}return result;}const utils = {$,createElem,generateId,distance,appendToBody(widget) {document.body.appendChild(widget.getRef());},includeCSS(css) {const head = document.head;const style = createElem('style');style.setAttribute('type', 'text/css');style.innerHTML = css;head.appendChild(style);},includeCSSLink(url) {const link = createElem('link');link.rel = 'stylesheet';link.href = url;document.head.appendChild(link);},includeJS(url) {const script = createElem('script');script.src = url;document.body.appendChild(script);},loadTheme(url) {const link = $(`link#cgui-theme`, document.head) || createElem('link');link.id = 'cgui-theme';link.rel = 'stylesheet';link.href = url;document.head.appendChild(link);}};class GUIElement {constructor() {this.ref = null;}_init() {this.addClass('cgui');}addClass(className) {this.ref.classList.add(className);return this;}addClasses(className) {this.ref.classList.add(className);return this.addClasses;}setClass(className) {this.ref.className = 'cgui-widget ' + className.trim();return this;}getRef() {return this.ref;}}class View {constructor() {this.ref = null;}init() {this.ref = createElem('div');return this;}mount(target) {this.ref = $(target);return this;}setContent(html) {this.ref.innerHTML = html;return this;}append(widget) {this.ref.appendChild(widget.getRef());return this;}}class Window extends GUIElement {constructor(x, y, name = '', collapsed = false) {super();this.ref = createElem('div');this._init();this.addClass('cgui-window');this.ref.style.position = 'absolute';this.ref.role = 'dialog';this.headerRef = createElem('div');this.headerRef.classList.add('cgui-window-header');const titleId = generateId(16);this.titleRef = createElem('span');this.titleRef.innerHTML = name;this.titleRef.id = titleId;this.titleRef.className = 'cgui-window-title';this.headerRef.appendChild(this.titleRef);this.setTitle(name);this.ref.setAttribute('aria-labeledby', titleId);this.headerRef.innerHTML += '&nbsp;';this.arrowRef = createElem('span');this.arrowRef.className = 'cgui-window-arrow';this.arrowRef.innerHTML = '▼';this.headerRef.appendChild(this.arrowRef);const contentId = generateId(16);this.contentRef = createElem('div');this.contentRef.id = contentId;this.contentRef.classList.add('cgui-window-content');this.ref.setAttribute('aria-describedby', contentId);this.view = new View().mount(this.contentRef);this.ref.appendChild(this.headerRef);this.ref.appendChild(this.contentRef);this.ref.style.left = `${x}px`;this.ref.style.top = `${y}px`;if (collapsed) this.collapse();document.body.appendChild(this.ref);this.initDraggable();this.initToggleOnClick();this.initActivationOnClick();}setTitle(html) {this.titleRef.innerHTML = html;return this;}setContent(html) {this.view.setContent(html);return this;}append(widget) {this.view.append(widget);return this;}move(x, y) {this.ref.style.left = `${x}px`;this.ref.style.top = `${y}px`;return this;}close() {return this.collapse();}open() {return this.expand();}collapse() {this.ref.classList.add('collapsed');this.arrowRef.innerHTML = '◀';return this;}expand() {this.ref.classList.remove('collapsed');this.arrowRef.innerHTML = '▼';return this;}toggle() {this.ref.classList.toggle('collapsed');if (this.ref.classList.contains('collapsed')) {this.arrowRef.innerHTML = '◀';} else {this.arrowRef.innerHTML = '▼';}return this;}hide() {this.ref.style.display = 'none';return this;}show() {this.ref.style.display = 'block';return this;}initDraggable(threshold = 10) {let startX, startY, offsetX, offsetY, isDragging = false,isMouseDown = false;const startDragging = (e) => {isDragging = true;this.ref.classList.add('cgui-dragging');};const onMouseDown = (e) => {e.preventDefault();e = e.touches ? e.touches[0] : e;isMouseDown = true;startX = e.clientX;startY = e.clientY;offsetX = e.clientX - this.ref.offsetLeft;offsetY = e.clientY - this.ref.offsetTop;};const onMouseMove = (e) => {e = e.touches ? e.touches[0] : e;if (!isDragging) {if (isMouseDown && distance(startX, startY, e.clientX, e.clientY) > threshold) {startDragging();}else return;}this.move(e.clientX - offsetX, e.clientY - offsetY);};const onMouseUp = () => {isDragging = isMouseDown = false;if (this.ref.classList.contains('cgui-dragging'))this.ref.classList.remove('cgui-dragging');};this.headerRef.addEventListener('mousedown', onMouseDown);this.headerRef.addEventListener('touchstart', onMouseDown, {passive: true});document.addEventListener('mousemove', onMouseMove);document.addEventListener('touchmove', onMouseMove);document.addEventListener('mouseup', onMouseUp);document.addEventListener('touchend', onMouseUp);}initToggleOnClick(threshold = 10) {let isClick = false,startX, startY;this.headerRef.addEventListener('pointerdown', e => {isClick = true;startX = e.clientX;startY = e.clientY;});document.addEventListener('pointermove', e => {if (distance(startX, startY, e.clientX, e.clientY) > threshold)isClick = false;});this.headerRef.addEventListener('pointerup', () => {if (isClick) this.toggle();});}initActivationOnClick() {this.ref.addEventListener('pointerdown', () => {[...document.getElementsByClassName('cgui-window')].forEach(win => win.classList.remove('active'));this.ref.classList.add('active');});}getRef() {return this.ref;}}class Element extends GUIElement {constructor(elementName = 'div') {super();this.ref = createElem(elementName);this._init();this.addClass('cgui-widget');}setText(text) {this.ref.innerHTML = text;return this;}onClick(f) {this.ref.addEventListener('click', f);return this;}}class Text extends Element {constructor(text = '') {super('div');this.addClass('cgui-text');this.setText(text);}}class Button extends Element {constructor(text = '') {super('button');this.addClass('cgui-btn');this.setText(text);}}class Input extends Element {constructor(text = '') {super('input');this.addClass('cgui-input');this.setText(text);}onInput(f) {this.ref.addEventListener('input', e => f(e, this.getText()));return this;}setText(text) {this.ref.value = text;return this;}getText() {return this.ref.value;}}class Switch extends Element {constructor(text = '') {super('label');const id = this.id = generateId(16);this.ref.for = id;this.addClass('cgui-switch');this.inputRef = createElem('input');this.inputRef.type = 'checkbox';this.inputRef.id = id;this.ref.appendChild(this.inputRef);this.sliderRef = createElem('span');this.sliderRef.className = 'cgui-switch-slider';this.ref.appendChild(this.sliderRef);this.textRef = createElem('span');this.textRef.className = 'cgui-switch-text';this.textRef.for = id;this.ref.appendChild(this.textRef);this.setText(text);}onChange(func) {this.inputRef.addEventListener('change', e => func(e, this.inputRef.checked));return this;}isChecked() {return this.inputRef.checked;}setText(text) {this.textRef.innerHTML = text;return this;}}class Tree extends Element {constructor(name = '', collapsed = true) {super('div');this.addClass('cgui-tree');this.headerRef = createElem('div');this.headerRef.classList.add('cgui-tree-header');const titleId = generateId(16);this.titleRef = createElem('span');this.titleRef.innerHTML = name;this.titleRef.id = titleId;this.titleRef.className = 'cgui-tree-title';this.headerRef.appendChild(this.titleRef);this.setTitle(name);this.headerRef.innerHTML += '&nbsp;';this.arrowRef = createElem('span');this.arrowRef.className = 'cgui-tree-arrow';this.arrowRef.innerHTML = '▼';this.headerRef.appendChild(this.arrowRef);const contentId = generateId(16);this.contentRef = createElem('div');this.contentRef.id = contentId;this.contentRef.classList.add('cgui-tree-content');this.view = new View().mount(this.contentRef);this.ref.appendChild(this.headerRef);this.ref.appendChild(this.contentRef);if (collapsed) this.collapse();this.initToggleOnClick();}setTitle(html) {this.titleRef.innerHTML = html;return this;}setContent(html) {this.view.setContent(html);return this;}collapse() {this.ref.classList.add('collapsed');this.arrowRef.innerHTML = '◀';return this;}expand() {this.ref.classList.remove('collapsed');this.arrowRef.innerHTML = '▼';return this;}toggle() {this.ref.classList.toggle('collapsed');if (this.ref.classList.contains('collapsed')) {this.arrowRef.innerHTML = '◀';} else {this.arrowRef.innerHTML = '▼';}return this;}append(widget) {this.view.append(widget);return this;}initToggleOnClick(threshold = 10) {this.headerRef.addEventListener('click', e => {this.toggle();});}}function openPopupMenu({title,elements,closable = true,closeText = 'Close'}) {return new Promise(resolve => {let divWrapper = createElem('div');let divPopup = createElem('div');let divTitle = createElem('div');let divMenu = createElem('div');divWrapper.className = 'cgui-popup-menu-wrapper cgui-fadein';divPopup.className = 'cgui cgui-popup-menu';divTitle.className = 'cgui-popup-menu-title';divMenu.className = 'cgui-popup-menu-content';divPopup.appendChild(divTitle);divPopup.appendChild(divMenu);divWrapper.appendChild(divPopup);divTitle.innerHTML = title;for (const item in elements) {const btn = createElem('button');btn.className = 'cgui-popup-menu-btn';btn.innerHTML = elements[item];divMenu.appendChild(btn);btn.onclick = () => {divWrapper.classList.add('cgui-fadeout');setTimeout(() => {divWrapper.remove();resolve(item);}, 150);};}if (closable) {const btn = createElem('button');btn.className = 'cgui-popup-menu-btn';btn.innerHTML = closeText;divMenu.appendChild(btn);btn.onclick = () => {divWrapper.classList.add('cgui-fadeout');setTimeout(() => {divWrapper.remove();resolve(-1);}, 150);};}document.body.appendChild(divWrapper);});}return { GUIElement, View, Window, Element, Text, Button, Input, Switch, Tree, openPopupMenu, utils };})();if (typeof module !== 'undefined' && typeof module.exports == 'object') module.exports = cheatgui;if (typeof globalThis !== 'undefined') globalThis.cheatgui = cheatgui;